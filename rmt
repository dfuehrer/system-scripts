#!/bin/sh
trashdir=${XDG_DATA_HOME:-$HOME/.local/share}/Trash/rmt
arcname=$(pwd)
#opts=''
echo $@
for f in "$@"; do [ -e "$f" ] && { [ ${#arcname} -le 100 ] && arcname="$arcname"-$(basename "$f"); files="$files $f"; } || opts="$opts $f"; done
echo $files
arcname=$(date +"%Y%m%d%H%M%S")_"$(echo "$arcname" | sed 's|/|%|g')"

cleanf=$(readlink -f $files | sed "s|$(pwd)/||g")
echo $cleanf
echo $opts
echo $arcname
# im commenting this out cause i dont think i need this and i use 
#echo "$cleanf"

# TODO see if theres a tar + compressor that makes more sense than zip, the biggest reason for zip is that it compresses ok but is really fast, something about as fast but better compression might be more desireable
# what i should do is set a compressor variable to switch easier
# the main reason i dont want to use zip is 1 its the default on windows so im weird about it (thats stupid) and 2 i know theres much better compressors
# lzip promised the speed of gzip and the power of bz2 but really didnt deliver either so im sad
# TODO i really need to try more
#   im not sure if i tried 7za originally
#   also zip is good enough probably since i think i remember it being pretty fast and fairly ok compression and normal trashes arent even compressed anyways
#   also look into multithreaded compression like with xz cuase that could be a lot faster depending on whats going on if i give it like 8 cores
#   look into using lbzip2

# TODO only remove recursively if necessary, the user should know to do that
#tar -jcf "$trashdir/${arcname}.tar.bzip2" $cleanf && rm -vI $opts $cleanf
tar -I lbzip2 -cf "$trashdir/${arcname}.tar.bzip2" $cleanf && rm -vI $opts $cleanf
#zip -q "$trashdir/$arcname" $cleanf && rm -vIR $opts $cleanf
