#!/usr/bin/env bash
tmpdir=$(mktemp -d /tmp/ic.XXXXXXXXXX)
# i just learned that tcc has this "c script mode" where it can just run a c file by compiling it and running it
# which is exactly what i want so its cool that it exists and i didnt even know about it
# so putting this shebang in the c file lets you run it like that (obviously you need tcc first but)
# but actually i just got rid of it becuase it makes the C invalid and its unnecessary

# this makes a file to make a printing function available so i can use a general print for this interface
# TODO make more of these functions to use for this
echo '#include <stdio.h>
void printi(int a){ printf("%d\n", a); }
void printl(long a){ printf("%ld\n", a); }
void printsize(size_t a){ printf("%zu\n", a); }
void printc(char c){ printf("%c\n", c); }
void printd(double f){ printf("%f\n", f); }
#define print(toprint) _Generic((toprint), int: printi, long: printl, size_t: printsize, char *: puts, char: printc, double: printd)(toprint)' > $tmpdir/printing.h
base='#include "printing.h"
/* ^^ more includes and defines ^^ */
/* ^^ function definitions ^^ */
int main(const int argc, const char * const argv[]){
    /* ^^ do stuffs ^^ */
    return 0;
}'
echo "$base" > $tmpdir/ic.c
# decide the run command based on if you have tcc
which tcc > /dev/null 2>&1 && CC=tcc && run='$CC -run $tmpdir/ic.c' || { CC=cc; run='$CC $tmpdir/ic.c -o $tmpdir/ic && $tmpdir/ic'; }
export HISTFILE=$tmpdir/ic.history
touch $HISTFILE
num=0
blocklevel=0
# remove the tmp dir we made for this and kill anything thats running
cleanup () {
    rm -rf "$tmpdir"
    kill -s CHLD 0
    exit
}
# just kill whatevers running and reset the line
term () {
    kill -s CHLD 0
    printf "\r"
    # i dont know if this is necessarily what i want but reset the block level to exit the blockyness after pressing ^C
    prev_blocklevel=0
    blocklevel=0
}
# on exit we want to cleanup everything
trap cleanup EXIT
# with ^C we want to kill the child but not this script
trap term INT
# we want to kill any child without killing ourselves
trap '' CHLD
while true; do
    # what this really needs at some point is a way to automatically print out the value of something so i can jsut type it in with an exclamation point or soemting (to indicate to run it now) and itll just run it without printing the rest of everything and give me the output of that one thing
    #   obviously the problem with that is that i have to figure out a way of removing all print statements for just 1 run and i need to write a dynamic print function which is jsut a stupid pain that i really dont know how to do other than brute forcing base datatypes like int, str, etc
    #   couple ways to do that but i could print out some key thing so that before it it discards all output untill the indicator then it prints the next thing (could do that in awk or something else)
    #   if you really want a powerful interface for looking at values and stuff, gdb has this feature and it is awesome and i cant do anything about that
    # TODO maybe make it so that if i just write a variable that has been previously defined in my script it will print it out with some auto printing function that i figure out how to write
    #   im really running up against a limitation here of trying to have C used like an interpreted language where i can just have it run 1 line at a time when i give it
    #   casue itd really be nice to know what has been saved and then work off of that but that just isnt feasible
    #   or maybe i do soemthing terrible where i end the program by writing the datas in ram to a file so something can load it and then operate on it from that point without needing to recalc
    #   but then ill wanna have it in ram so i dont have to do a lotta io on your drive
    #   and then maybe i learn how a daemon works and just have small programs interact with a daemon to get the data it needs for the first time and then do stuff
    #   but ultimately this is all dumb cause C is fast and what kind of idiot would use this as a programming environment for something complicated
    # TODO itd be super cool if we could get syntax highlighting in here but i bet thatd actually be impossible
    #   at least without actually writing this program from scratch
    #   which might be a better idea to actually write a c program to use readline and history and stuff to do all of this and then we could use a syntax highlighting library and stuff
    # TODO make a way to be able to add functions
    prompt="[$num]: "
    [ $blocklevel -gt 0 ] && prompt="$(printf '%*s' ${#prompt} '...: ')"
    indents="$(printf '%*s' $(($blocklevel*4)) '')"
    read -re -p "$prompt" -i "$indents" input || exit

    prev_blocklevel=$blocklevel
    blocklevel=$(( $blocklevel + $(echo "$input" | grep -o '{' | wc -l) - $(echo "$input" | grep -o '}' | wc -l) ))
    # if got input then increment, otherwise go to next iter
    [ -z "$input" ] && continue || { [ $blocklevel -eq 0 ] && num=$((num+1)); }
    #input="$(echo "$input" | sed '$q;s/$/\\\\n/g' | tr -d '\n')"
    # replace the escapes so they get put in as intended
    input="$(echo "$input" | sed 's/\\\([abcefnrtv0xuU]\)/\\\\\1/g')"
    #echo "$input"
    case "$input" in
        # use the ! prefix to run shell commands
        # maybe i should do a whoami to check that its not root when running arbitrary commands
        # tho this literally lets you run whatever you want in c so you really have no limitations at that point
        !*) { eval ${input#!}; false; };;
        gdb|debug) { cc -g $tmpdir/ic.c -o $tmpdir/ic && gdb $tmpdir/ic; false; };;
        # TODO dont use eval here since im not sanitizing the library input
        # TODO make it so that i can run it with clargs
        run) { eval $run; false; };;
        lib*|library*) { CC="$CC -l${input#* }"; false; };;
        # time tells it to compile and time the running of the program
        time) { $CC $tmpdir/ic.c -o $tmpdir/ic && time $tmpdir/ic; false; };;
        # this allows for somethign like time 100 to time 100 runs of the program at once quietly (since these probably run really fast)
        time*) { $CC $tmpdir/ic.c -o $tmpdir/ic && time for i in $(seq ${input#* }); do $tmpdir/ic >> /dev/null; done; false; };;
        # r for color, X for not clearing screen, E for exiting at EOF
        show) { highlight -O truecolor -F user -lt 4 --style=code-dark $([ -n "$HIGHLIGHT_DATADIR" ] && echo -D "$HIGHLIGHT_DATADIR") $tmpdir/ic.c | less -rXE; false; };;
        #show) { bat -n --theme OneHalfDark --tabs 4 $tmpdir/ic.c; false; };;
        # yes this is stupid to run a highlighter and strip its colors and then highlight with bat
        #show) { highlight -O ansi -F user -t 4 $tmpdir/ic.c | ansifilter -T | bat --theme=code-dark -nl c; false; };;
        # TODO dont use eval (even though i should be escaping it ok) (using eval for the globbing and expansion stuffs)
        save) { read -e -p 'Where do you want it saved to? ' -i '~/' saveloc && eval cp -i $tmpdir/ic.c "${saveloc%%[;|&]*}"; false; };;
        clear) { echo "$base" > $tmpdir/ic.c && clear && num=0; false; };;
        help*|man*) { man ${input#* }; false; };;
        # TODO figure out how to do multi line deletion this way
        # TODO make it so you can say del [number] and it will delete the num that is shown when you typed it
        #del*) { [ "$input" = 'del' ] && input="$input "; cp $tmpdir/ic.c $tmpdir/ic-pre.c && delnum=$(highlight  -O ansi -lt 4 $tmpdir/ic-pre.c | fzf -1 --ansi --tiebreak=begin --query="${input#* }" | sed 's/\s*\([0-9]\+\).*/\1/') && [ $delnum ] && sed ${delnum}d $tmpdir/ic-pre.c > $tmpdir/ic.c; false; };;
        del*|rm*) { [ "$input" = 'del' ] && input="$input "; cp $tmpdir/ic.c $tmpdir/ic-pre.c && delnum=$(bat --theme OneHalfDark -nf --tabs 4 $tmpdir/ic-pre.c | fzf -1 --ansi --tiebreak=begin --query="${input#* }" | sed 's/\s*\([0-9]\+\).*/\1/') && [ $delnum ] && sed ${delnum}d $tmpdir/ic-pre.c > $tmpdir/ic.c; false; };;
        # TODO have an edit option that can take a line to edit and put it in my line so i can just edit it there
        #   TODO then also do the thing i want with del where i can specify the number i wrote it as (this will be difficult too with multi line [number]s)
        ed) { ed $tmpdir/ic.c; false; };;
        e|edit) { ${EDITOR:-vim} $tmpdir/ic.c; false; };;
        exit|quit) exit;;
    esac &&
        { [ -n "$(cat $tmpdir/ic.c)" ] &&
            cp $tmpdir/ic.c $tmpdir/ic-pre.c
            # if starts with #include or #define then put at beginning for includes and defines not perfect but pretty good
            [ $prev_blocklevel -eq 0 ] && { [ "${input#\#include}" != "$input" ] || [ "${input#\#define}" != "$input" ] && 
                comment='more includes and defines' || 
                # function definition starts with a type then a space then a name of the function then a (
                { echo "$input" | grep '[[:alnum:]_]\+[[:space:]][[:alnum:]_ ]\+(' -q && comment='function definitions'; } || 
                { comment='do stuffs' && input="$(printf "\\\\\\t%s" "$input")"; }
            } || [ $prev_blocklevel -gt 0 ] && 
                sed '/\/\* \^\^ '"$comment"' \^\^ \*\//i '"$input"'' $tmpdir/ic-pre.c > $tmpdir/ic.c; }
    history -s "$input"
    history -a
done
