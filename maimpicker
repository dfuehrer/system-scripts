#!/bin/sh
# choose how to screenshot with a bunch of options (bonus i only write maim once)
spec='flags: h,help w,window,W=-screen=-select S,screen=-select=-window s,select=-window=-screen a,save save-only p,pick=-window=-select=-screen n,name e,edit; parameters: pick,p n,name opts;'
helpmsg='
window    = screenshot current window
screen    = screenshot whole screen (all monitors)
select    = get a selectable rectangle to screenshot
save      = save screenshot to file in ~/Pictures/screenshots
save-only = only save to file, do not put in clipboard
pick      = choose whether to screenshot window, screen, or selection interactively or from command line input
name      = choose output file name interactively or from command line input
edit      = edit the screenshot file in GIMP after saving it
'
eval "$(echo "$spec" | clparser -E -H "$helpmsg" -- "$@")" || exit
$help && exit
# set a name if not given one, or ask through dmenu
# NOTE if you dont set a name and try to screenshot more than once a second it will overwrite the others that second, probably should have it check and incrememnt
scrdir="$HOME/Pictures/screenshots"
if [ "$n" = true ]; then
    # if did -n to indicate selecting name interactively then choose name through dmenu
    name="$(printf '' | dmenu -p "Name:")"
elif [ "$n" = false ]; then
    # otherwise if you didnt give a name on the commandline, clear out false from the name
    name=
fi
[ -z "$name" ] && name="screenshot$(date +%+4Y%m%d-%H%M%S.%N).png"
name="$scrdir/$name"
# if gave opts then whatever i guess, this is just maim then with extra steps (why did i do this?)
if [ -z "$opts" ]; then
    # if gave no options or pick then open dmenu (unless gave an option for pick, then use that)
    # TODO figure out checking for no args before clparser
    if $pick || ! { $window || $screen || $select; }; then
        pick="$(printf 'window\nscreen\nselect' | dmenu -p 'screenshot type:' -i )"
    fi
    # if pick has an option set then choose what option that should be to be used later
    if ! $window && ! $screen && ! $select; then
        case "$pick" in
            'window') window=true;;
            'screen') screen=true;;
            'select') select=true;;
            *) echo pick window, screen, or select; exit 1;;
        esac
        save=true   # always save if you used pick
    fi
    # if w - choose window with xdotool like in maim example and be done, if S then fullscreen (defualt), if s then select
    #{ $window && opts='-i $(xdotool getactivewindow)'; } || $screen || { $select && opts='-ulsc 0.4,0.2,0.5,0.1 -n'; }
    if $window; then
        opts='-i $(xdotool getactivewindow)'
    elif $screen; then
        # i dont think there are any options needed to screenshot whole screen
        :
    elif $select; then
        opts='-ulsc 0.4,0.2,0.5,0.1 -n'
    fi
    # if saving then save to file with tee
    if $save; then
        opts="$opts | tee '$name'"
    elif $save_only; then
        # just redirect if not copying with xclip
        opts="$opts > '$name'"
    fi
fi
# if not save only then also pipe to xclip
# killing prev xclip since were going to start a new xclip for our copied screenshot
if ! $save_only; then
    pkill -f 'xclip .* -t image'
    opts="$opts | xclip -selection clipboard -t image/png"
fi
# run maim with the options we set
# NOTE im having an issue with it not screenshotting but that issue comes down to sxhkd not always grabbing my alt+shift so it doesnt tell this to save so i have it notify me since i usually want to save
eval maim $opts
#$save || $save_only && { [ 'image/png' = "$(xdg-mime query filetype "$name")" ] || { notify-send "$(basename $0)" "oof $(basename $name) didnt save you dont have that screenshot"; [ -s "$name" ] || rm "$name"; exit; }; } || notify-send "maimpicker" "hopefully you didnt want to save that cause i didn't"
if $save || $save_only; then
    if [ "$(xdg-mime query filetype "$name")" != 'image/png' ]; then
        notify-send "$(basename $0)" "oof $(basename $name) didnt save you dont have that screenshot"
        if ! [ -s "$name" ]; then
            rm "$name"
            exit
        fi
    fi
else
    notify-send "maimpicker" "hopefully you didnt want to save that cause i didn't"
fi
# TODO make e a parameter to give it the editor to use so i can use something more paint like drawing or pinta or any of the others
# also maybe have it save $name and work in gimp as a copy or soemthing
# NOTE this doesnt work if you save it as something different
$edit && ${IMAGE_EDITOR:-gimp -a} "$name" && xclip -selection clipboard -t image/png "$name"
